#cloud-config

# MapMap Tile Proxy Cloud-Init Configuration
# Deploy MapMap on Ubuntu 22.04+ VPS with Docker and production setup

package_update: true
package_upgrade: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - git
  - htop
  - fail2ban
  - ufw

# Create mapmap user
users:
  - name: mapmap
    groups: [sudo, docker]
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJKQ+6iZKKw0eMJbuMTIyoZ9940ecNlac6dqCpy3eiCq vadikas@c57bl6

# Configure firewall
runcmd:
  # Configure UFW firewall
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow ssh
  - ufw allow 8111/tcp
  - ufw --force enable

  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker mapmap

  # Install Docker Compose (standalone)
  - curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose

  # Clone MapMap repository
  - cd /home/mapmap
  - git clone https://github.com/yourusername/mapmap.git
  - chown -R mapmap:mapmap /home/mapmap/mapmap
  - cd /home/mapmap/mapmap

  # Setup production environment
  - cp .env.production .env
  - chown mapmap:mapmap .env

  # Create directories
  - mkdir -p /home/mapmap/mapmap/logs
  - chown -R mapmap:mapmap /home/mapmap/mapmap

  # Configure fail2ban
  - systemctl enable fail2ban
  - systemctl start fail2ban

write_files:
  # Production environment configuration
  - path: /home/mapmap/mapmap/.env
    owner: mapmap:mapmap
    permissions: '0600'
    content: |
      # Production Environment Configuration
      LOG_LEVEL=WARNING
      CACHE_SIZE=10000
      CACHE_TTL=7200
      
      # Security - IMPORTANT: Update these values!
      ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
      ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com
      SECRET_KEY=REPLACE_WITH_SECURE_RANDOM_STRING
      
      # Performance
      WORKERS=4
      MAX_CONNECTIONS=1000
      KEEPALIVE_TIMEOUT=5
      
      # WMTS Endpoints
      WMTS_ENDPOINTS={"latvia": {"url": "https://lvmgeoproxy01.lvm.lv/wmts_b6948e305fb9446985a41b2aee54e07d/wmts", "layer": "public:Topo10DTM", "coordinate_system": "LKS_LVM", "app_id": "lvmgeo.lvm.lv/", "style": "raster", "format": "image/vnd.jpeg-png8"}, "latvia_webmercator": {"url": "https://lvmgeoproxy01.lvm.lv/wmts_b6948e305fb9446985a41b2aee54e07d/wmts", "layer": "public:Topo10DTM", "coordinate_system": "WebMercatorQuad", "app_id": "lvmgeo.lvm.lv/", "style": "raster", "format": "image/vnd.jpeg-png8"}}
      
      # Default endpoint
      DEFAULT_ENDPOINT=latvia_webmercator
      
      # Monitoring
      ENABLE_METRICS=true
      METRICS_PORT=9090
      
      # Rate Limiting
      RATE_LIMIT_ENABLED=true
      RATE_LIMIT_REQUESTS=1000
      RATE_LIMIT_WINDOW=3600

  # Nginx production configuration with SSL
  - path: /home/mapmap/mapmap/nginx-ssl.conf
    owner: mapmap:mapmap
    permissions: '0644'
    content: |
      user nginx;
      worker_processes auto;
      error_log /var/log/nginx/error.log warn;
      pid /var/run/nginx.pid;

      events {
          worker_connections 1024;
          use epoll;
          multi_accept on;
      }

      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;

          log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          'rt=$request_time uct="$upstream_connect_time" '
                          'uht="$upstream_header_time" urt="$upstream_response_time"';

          access_log /var/log/nginx/access.log main;

          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          types_hash_max_size 2048;
          client_max_body_size 1M;

          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_types
              text/plain
              text/css
              text/xml
              text/javascript
              application/json
              application/javascript
              application/xml+rss
              application/atom+xml
              image/svg+xml;

          limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
          limit_req_zone $binary_remote_addr zone=tiles:10m rate=100r/s;

          upstream mapmap_backend {
              server mapmap:8000;
              keepalive 32;
          }

          # HTTP server - redirect to HTTPS
          server {
              listen 80;
              server_name yourdomain.com www.yourdomain.com;
              return 301 https://$server_name$request_uri;
          }

          # HTTPS server
          server {
              listen 443 ssl http2;
              server_name yourdomain.com www.yourdomain.com;

              ssl_certificate /etc/nginx/ssl/cert.pem;
              ssl_certificate_key /etc/nginx/ssl/key.pem;
              ssl_session_timeout 1d;
              ssl_session_cache shared:SSL:50m;
              ssl_stapling on;
              ssl_stapling_verify on;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;

              add_header Strict-Transport-Security "max-age=63072000" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header Referrer-Policy "strict-origin-when-cross-origin" always;

              limit_req zone=api burst=20 nodelay;

              location /health {
                  access_log off;
                  proxy_pass http://mapmap_backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /tiles/ {
                  limit_req zone=tiles burst=200 nodelay;
                  
                  proxy_cache_valid 200 1h;
                  proxy_cache_valid 404 1m;
                  add_header X-Cache-Status $upstream_cache_status;

                  proxy_pass http://mapmap_backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  proxy_connect_timeout 5s;
                  proxy_send_timeout 10s;
                  proxy_read_timeout 10s;
              }

              location / {
                  proxy_pass http://mapmap_backend;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  
                  proxy_connect_timeout 5s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
          }
      }

  # Systemd service for MapMap
  - path: /etc/systemd/system/mapmap.service
    permissions: '0644'
    content: |
      [Unit]
      Description=MapMap Tile Proxy
      After=docker.service
      Requires=docker.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      WorkingDirectory=/home/mapmap/mapmap
      ExecStart=/usr/local/bin/docker-compose -f docker-compose.production.yml up -d
      ExecStop=/usr/local/bin/docker-compose -f docker-compose.production.yml down
      TimeoutStartSec=0
      User=mapmap
      Group=mapmap

      [Install]
      WantedBy=multi-user.target

  # Deployment script
  - path: /home/mapmap/deploy-mapmap.sh
    owner: mapmap:mapmap
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e

      echo "üöÄ Deploying MapMap Tile Proxy..."

      # Navigate to project directory
      cd /home/mapmap/mapmap

      # Update repository
      echo "üì• Updating repository..."
      git pull origin main

      # Build and start services
      echo "üê≥ Building and starting Docker services..."
      docker-compose -f docker-compose.production.yml build --no-cache
      docker-compose -f docker-compose.production.yml up -d

      # Wait for services to start
      echo "‚è≥ Waiting for services to start..."
      sleep 30

      # Health check
      echo "üîç Checking service health..."
      if curl -f http://localhost:8000/health; then
          echo "‚úÖ MapMap is running successfully!"
          echo "üåê Service available at: https://$(hostname -f)"
      else
          echo "‚ùå Health check failed!"
          docker-compose -f docker-compose.production.yml logs
          exit 1
      fi

  

  # Monitoring script
  - path: /home/mapmap/monitor-mapmap.sh
    owner: mapmap:mapmap
    permissions: '0755'
    content: |
      #!/bin/bash

      echo "üìä MapMap Service Status"
      echo "======================="

      cd /home/mapmap/mapmap

      # Docker containers status
      echo "üê≥ Container Status:"
      docker-compose -f docker-compose.production.yml ps

      echo ""
      echo "üîç Health Check:"
      curl -s http://localhost:8000/health | jq . || echo "‚ùå Health check failed"

      echo ""
      echo "üìà Metrics (if enabled):"
      curl -s http://localhost:8000/metrics | grep -E "mapmap_.*_total" || echo "Metrics not available"

      echo ""
      echo "üíæ System Resources:"
      echo "Memory: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
      echo "Disk: $(df -h / | tail -1 | awk '{print $3 "/" $2 " (" $5 " used)"}')"
      echo "Load: $(uptime | cut -d',' -f3-)"

final_message: |
  üéâ MapMap Tile Proxy has been deployed successfully!
  
  Next steps:
  1. Update /home/mapmap/mapmap/.env with your domain and secret key
  2. Enable systemd service: sudo systemctl enable mapmap
  3. Monitor service: sudo -u mapmap /home/mapmap/monitor-mapmap.sh
  
  Service endpoints:
  - Health: http://your-server-ip:8000/health
  - Tiles: http://your-server-ip:8000/tiles/{z}/{x}/{y}
  - Metrics: http://your-server-ip:8000/metrics
  
  Security reminders:
  - Change SSH keys and passwords
  - Update ALLOWED_ORIGINS and ALLOWED_HOSTS in .env
  - Generate a secure SECRET_KEY
  - Configure DNS to point to this server
  
  For support, check /home/mapmap/mapmap/DEPLOYMENT.md